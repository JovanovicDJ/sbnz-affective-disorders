package rules

import com.ftn.sbnz.model.SymptomGroup;
import com.ftn.sbnz.model.Symptom;
import com.ftn.sbnz.model.Patient;
import com.ftn.sbnz.model.DepressionEvent;
import com.ftn.sbnz.model.DepressiveEpisode;
import com.ftn.sbnz.model.ManicEpisode;
import com.ftn.sbnz.model.DepressionType;
import com.ftn.sbnz.model.GenderType;
import com.ftn.sbnz.model.BipolarDisorderType;
import com.ftn.sbnz.model.BipolarDisorder;

import java.time.LocalDate;

global Boolean maxRuleExecuted;

rule "Check shared depression symptoms if intensity is higher then 45 make DepressionEvent"
when
    $patient : Patient($id : id)
    $s1 : Symptom(name == "affect", intensity >= 4, patientId == $id)
    $s2 : Symptom(name == "anhedonia", intensity >= 3, patientId == $id)
    $s3 : Symptom(name == "hopelessness", intensity >= 4, patientId == $id)
    $s4 : Symptom(name == "worthlessness", intensity >= 4, patientId == $id)
    $s5 : Symptom(name == "duration", intensity == 5, patientId == $id)
    $total : Number(this > 45) from accumulate(
        Symptom($intensity : intensity, symptomGroup == SymptomGroup.DEPRESSIVE_EPISODE, patientId == $id),
        sum($intensity)
    )
then
    insert(new DepressionEvent($id, $total.intValue()));
end


rule "Check if depression is with anxious agitation"
when
    $de : DepressionEvent($de_intensity : intensity)
    $patient : Patient($id : id)
    $s1 : Symptom(name == "concentration", symptomGroup == SymptomGroup.DEPRESSIVE_EPISODE, intensity >= 4, patientId == $id)
    $s2 : Symptom(name == "tension", intensity >= 4, patientId == $id)
    $s3 : Symptom(name == "unrest", intensity >= 4, patientId == $id)
    $s4 : Symptom(name == "concern", intensity >= 3, patientId == $id)
    $total : Number(this > 18) from accumulate(
            Symptom($intensity : intensity, symptomGroup == SymptomGroup.DE_WITH_ANXIETY, patientId == $id),
            sum($intensity)
    )
then
    insert(new DepressiveEpisode(DepressionType.WITH_ANXIETY, $id, $total.intValue() + $de_intensity, false));
end


rule "Check if depression is with melancholic features"
when
    $de : DepressionEvent($de_intensity : intensity)
    $patient : Patient($id : id)
    $s1 : Symptom(name == "disturbed sleep", symptomGroup == SymptomGroup.DEPRESSIVE_EPISODE, intensity >= 3, patientId == $id)
    $s2 : Symptom(name == "disturbed appetite", symptomGroup == SymptomGroup.DEPRESSIVE_EPISODE, intensity >= 3, patientId == $id)
    $s3 : Symptom(name == "loss of interest", intensity >= 3, patientId == $id)
    $s4 : Symptom(name == "emptiness", intensity >= 3, patientId == $id)
    $total : Number(this >= 12) from accumulate(
                Symptom($intensity : intensity, symptomGroup == SymptomGroup.DE_WITH_MELANCHOLY, patientId == $id),
                sum($intensity)
    )
then
    insert(new DepressiveEpisode(DepressionType.WITH_MELANCHOLY, $id, $total.intValue() + $de_intensity, false));
end


rule "Check if depression is with atypical features"
when
    $de : DepressionEvent($de_intensity : intensity)
    $patient : Patient($id : id)
    $total : Number(this > 12) from accumulate(
                Symptom($intensity : intensity, symptomGroup == SymptomGroup.DE_WITH_ATYPICAL_FEATURES, patientId == $id),
                sum($intensity)
    )
then
    insert(new DepressiveEpisode(DepressionType.WITH_ATYPICAL_FEATURES, $id, $total.intValue() + $de_intensity, false));
end


rule "Check if depression is with psychotic features"
when
    $de : DepressionEvent($de_intensity : intensity)
    $patient : Patient($id : id)
    $total : Number() from accumulate(
                    Symptom($intensity : intensity, symptomGroup == SymptomGroup.DE_WITH_PSYCHOTIC_FEATURES, patientId == $id),
                    sum($intensity)
    )
    $average : Number(this > 3.8) from accumulate(
        Symptom($intensity : intensity, symptomGroup == SymptomGroup.DE_WITH_PSYCHOTIC_FEATURES, patientId == $id),
        average($intensity)
    )
then
    insert(new DepressiveEpisode(DepressionType.WITH_PSYCHOTIC_FEATURES, $id, $total.intValue() + $de_intensity, false));
end


rule "Check if depression is with paripartum onset (in pragnancy)"
when
    $de : DepressionEvent($de_intensity : intensity)
    $patient : Patient($id : id, gender == GenderType.FEMALE)
    $s1 : Symptom(name == "in pregnancy", intensity == 5, patientId == $id)
then
    insert(new DepressiveEpisode(DepressionType.WITH_PERIPARTUM_ONSET, $id, 5, false));
end


rule "Check if depression is with paripartum onset (after pragnancy)"
when
    $de : DepressionEvent($de_intensity : intensity)
    $patient : Patient($id : id, gender == GenderType.FEMALE)
    $s1 : Symptom(name == "after pregnancy", intensity == 5, patientId == $id)
then
    insert(new DepressiveEpisode(DepressionType.WITH_PERIPARTUM_ONSET, $id, 5, false));
end


rule "Choose depression episode with highest intensity"
when
    $max : DepressiveEpisode($intensity : intensitySum, accepted == false)
    not DepressiveEpisode(intensitySum > $intensity, accepted == false)
then
    if (!maxRuleExecuted) {
        modify($max){setAccepted(true)}
        drools.getKnowledgeRuntime().setGlobal("maxRuleExecuted", true);
    }
end

rule "Accepted depressive episode"
when
    $de : DepressiveEpisode(accepted == true)
then
    System.out.println(maxRuleExecuted);
    System.out.println($de.getDepressionType());
    System.out.println($de.getIntensitySum());
end


rule "Delete DepressiveEpisode with lower intensity"
when
    $not_max : DepressiveEpisode($intensity : intensitySum, accepted == false)
    DepressiveEpisode(intensitySum > $intensity, accepted == false)
then
    delete($not_max);
    System.out.println("Deleted " + $not_max.getDepressionType());
end


rule "Check if Manic Episode and Depressive Episode (anxiety) overlap over time window of 2 months"
when
    $patient : Patient($id : id)
    $de : DepressiveEpisode(depressionType == DepressionType.WITH_ANXIETY, $depression_intensity : intensitySum)
    $me : ManicEpisode($mania_intensity : intensitySum)
    over window : time(60d)
then
    insert(new BipolarDisorder(BipolarDisorderType.WITH_ANXIETY, $id, $depression_intensity + $mania_intensity, false));
end


rule "Check if Manic Episode and Depressive Episode (melancholy) overlap over time window of 2 months"
when
    $patient : Patient($id : id)
    $de : DepressiveEpisode(depressionType == DepressionType.WITH_MELANCHOLY, $depression_intensity : intensitySum)
    $me : ManicEpisode($mania_intensity : intensitySum)
    over window : time(60d)
then
    insert(new BipolarDisorder(BipolarDisorderType.WITH_MELANCHOLY, $id, $depression_intensity + $mania_intensity, false));
end


rule "Check if Manic Episode and Depressive Episode (atypical) overlap over time window of 2 months"
when
    $patient : Patient($id : id)
    $de : DepressiveEpisode(depressionType == DepressionType.WITH_ATYPICAL_FEATURES, $depression_intensity : intensitySum)
    $me : ManicEpisode($mania_intensity : intensitySum)
    over window : time(60d)
then
    insert(new BipolarDisorder(BipolarDisorderType.WITH_ATYPICAL_FEATURES, $id, $depression_intensity + $mania_intensity, false));
end


rule "Check if Manic Episode and Depressive Episode (psychotic) overlap over time window of 2 months"
when
    $patient : Patient($id : id)
    $de : DepressiveEpisode(depressionType == DepressionType.WITH_PSYCHOTIC_FEATURES, $depression_intensity : intensitySum)
    $me : ManicEpisode($mania_intensity : intensitySum)
    over window : time(60d)
then
    insert(new BipolarDisorder(BipolarDisorderType.WITH_PSYCHOTIC_FEATURES, $id, $depression_intensity + $mania_intensity, false));
end


rule "Check if Manic Episode and Depressive Episode (paripartum) overlap over time window of 2 months"
when
    $patient : Patient($id : id, gender == GenderType.FEMALE)
    $de : DepressiveEpisode(depressionType == DepressionType.WITH_PERIPARTUM_ONSET, $depression_intensity : intensitySum)
    $me : ManicEpisode($mania_intensity : intensitySum)
    over window : time(60d)
then
    insert(new BipolarDisorder(BipolarDisorderType.WITH_PERIPARTUM_ONSET, $id, $depression_intensity + $mania_intensity, false));
end

rule "Check if Manic Episode and Depressive Episode overlap over duration of 2 months"
when
    $de : DepressiveEpisode()
    $me : ManicEpisode(this overlaps[60d] $de)
then
    System.out.println("Overlaps " + DepressionType.valueOf(String.valueOf(DepressionType.WITH_ANXIETY)));
end


rule "Depressive episode"
when
    $de : DepressiveEpisode($type : depressionType, $intensity : intensitySum)
then
    System.out.println($type);
    System.out.println($intensity);
end


rule "Bipolar Disorder"
when
    $bd : BipolarDisorder()
then
    System.out.println("Bipolar Disorder: " + $bd.getBipolarDisorderType());
end
